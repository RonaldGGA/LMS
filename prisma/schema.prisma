// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Prisma schema  
// Prisma schema  
// . User → UserAccount
// Nombre sugerido: UserAccount
// Explicación: Representa una cuenta de usuario en el sistema.
// 2. Rating → BookRating
// Nombre sugerido: BookRating
// Explicación: Indica que los ratings están asociados a libros.
// 3. Book → BookCopy (para copias físicas)
// Nombre sugerido: BookCopy
// Explicación: Representa una copia física de un libro (ejemplo: una copia en stock).
// 4. Author → BookAuthor
// Nombre sugerido: BookAuthor
// Explicación: Autor de un libro, para distinguir de otros tipos de autores.
// 5. IssuedBook → BookLoan
// Nombre sugerido: BookLoan
// Explicación: Registro de un préstamo de libro.
// 6. Bail → BookSecurityDeposit
// Nombre sugerido: BookSecurityDeposit
// Explicación: Depósito o garantía asociada al préstamo de un libro.
// 7. IssueRequest → bookLoanRequest
// Nombre sugerido: bookLoanRequest
// Explicación: Solicitud o reserva de un libro.
// 8. CategoryBook → BookCategory
// Nombre sugerido: BookCategory
// Explicación: Categoría o género de un libro (ejemplo: "Ficción", "No Ficción", etc.).

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  MEMBER
  SUPERADMIN
  LIBRARIAN
}

model UserAccount {
  id       String @id @default(cuid())
  username String @unique
  password String
  dni      String @unique

  bookLoans            BookLoan[]
  bookRatings          BookRating[]
  bookLoanRequests     BookLoanRequest[]
  bookSecurityDeposits BookSecurityDeposit[]

  accounts Account[]
  sessions Session[]

  role Role @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  img           String?
  Authenticator Authenticator[]
}

model BookRating {
  id          String @id @default(cuid())
  rating      Int    @default(0)
  userId      String
  bookTitleId String

  user      UserAccount @relation(fields: [userId], references: [id])
  bookTitle BookTitle   @relation(fields: [bookTitleId], references: [id])

  @@map("book_ratings")
}

model BookTitle {
  id          String @id @default(cuid())
  title       String @unique
  description String

  authorId String
  author   BookAuthor @relation(fields: [authorId], references: [id])

  book_price String @default("0")
  stock      Int    @default(1)

  bookRatings BookRating[]
  bookCopies  BookCopy[]
  categories  BookCategory[]
  img         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title, authorId])
}

model BookCopy {
  id String @id @default(cuid())

  bookTitleId String
  bookTitle   BookTitle @relation(fields: [bookTitleId], references: [id], onDelete: Cascade)

  copy_number Int @default(1)

  bookLoans            BookLoan[]
  bookSecurityDeposits BookSecurityDeposit[]
  bookLoanRequests     BookLoanRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookAuthor {
  id          String      @id @default(cuid())
  author_name String      @unique
  bookTitles  BookTitle[]
}

enum BookLoanStatus {
  REQUESTED
  IN_STOCK
  ISSUED
}

model BookLoan {
  id         String @id @default(cuid())
  bookCopyId String
  userId     String

  status BookLoanStatus @default(ISSUED)

  user     UserAccount @relation(fields: [userId], references: [id])
  bookCopy BookCopy    @relation(fields: [bookCopyId], references: [id], onDelete: Cascade)

  loanDate   DateTime  @default(now())
  returnDate DateTime?
}

model BookCategory {
  id         String      @id @default(cuid())
  name       String      @unique
  bookTitles BookTitle[]

  @@index([name])
}

enum BookLoanRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model BookLoanRequest {
  id         String   @id @default(cuid())
  bookCopyId String
  bookCopy   BookCopy @relation(fields: [bookCopyId], references: [id], onDelete: Cascade)

  userId String
  user   UserAccount @relation(fields: [userId], references: [id])

  status BookLoanRequestStatus @default(PENDING)

  requestDate    DateTime  @default(now())
  acceptanceDate DateTime?

  description String?

  bookSecurityDepositId String              @unique
  bookSecurityDeposit   BookSecurityDeposit @relation(name: "bookLoanToSecurityDeposit", fields: [bookSecurityDepositId], references: [id])

  updatedAt DateTime @updatedAt
}

enum BookSecurityDepositState {
  ACTIVE
  UNACTIVE
}

enum BookPaymentMethod {
  CASH
  TRANSFER
  DIGITAL
}

model BookSecurityDeposit {
  id         String @id @default(cuid())
  userId     String
  bookCopyId String
  amount     String @default("0")

  bookCopy BookCopy    @relation(fields: [bookCopyId], references: [id], onDelete: Cascade)
  user     UserAccount @relation(fields: [userId], references: [id])

  refundDate     DateTime?
  refundedAmount String    @default("0")

  depositDate DateTime @default(now())

  paidDate   DateTime?
  returnDate DateTime?

  state BookSecurityDepositState @default(ACTIVE)

  paymentMethod    BookPaymentMethod @default(CASH)
  paymentReference String? // Reference number for bank transfers  

  bookLoanRequest BookLoanRequest? @relation(name: "bookLoanToSecurityDeposit")
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String      @unique
  userId       String
  expires      DateTime
  user         UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
